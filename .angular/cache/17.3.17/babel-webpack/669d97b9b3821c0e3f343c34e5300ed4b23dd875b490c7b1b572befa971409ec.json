{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst STORAGE_KEY = \"companies_v1\";\nexport class CompanyService {\n  constructor() {\n    this.companies = [];\n    const raw = localStorage.getItem(STORAGE_KEY);\n    if (raw) {\n      this.companies = JSON.parse(raw);\n    } else {\n      // ✅ Seed dummy data on first load\n      this.companies = [{\n        id: \"1\",\n        name: \"Google\",\n        email: \"contact@google.com\",\n        phone: \"1234567890\",\n        createdAt: new Date().toISOString()\n      }, {\n        id: \"2\",\n        name: \"Microsoft\",\n        email: \"info@microsoft.com\",\n        phone: \"9876543210\",\n        createdAt: new Date().toISOString()\n      }, {\n        id: \"3\",\n        name: \"Amazon\",\n        email: \"support@amazon.com\",\n        phone: \"5556667777\",\n        createdAt: new Date().toISOString()\n      }];\n      this.persist();\n    }\n  }\n  persist() {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\n  }\n  list() {\n    return [...this.companies].sort((a, b) => b.createdAt.localeCompare(a.createdAt));\n  }\n  get(id) {\n    return this.companies.find(c => c.id === id);\n  }\n  create(company) {\n    this.companies.push({\n      ...company,\n      id: new Date().getTime().toString(),\n      // generate ID\n      createdAt: new Date().toISOString()\n    });\n    this.persist();\n  }\n  update(id, patch) {\n    const idx = this.companies.findIndex(c => c.id === id);\n    if (idx >= 0) {\n      this.companies[idx] = {\n        ...this.companies[idx],\n        ...patch\n      };\n      this.persist();\n    }\n  }\n  delete(id) {\n    this.companies = this.companies.filter(c => c.id !== id);\n    this.persist();\n  }\n  static {\n    this.ɵfac = function CompanyService_Factory(t) {\n      return new (t || CompanyService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CompanyService,\n      factory: CompanyService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["STORAGE_KEY","CompanyService","constructor","companies","raw","localStorage","getItem","JSON","parse","id","name","email","phone","createdAt","Date","toISOString","persist","setItem","stringify","list","sort","a","b","localeCompare","get","find","c","create","company","push","getTime","toString","update","patch","idx","findIndex","delete","filter","factory","ɵfac","providedIn"],"sources":["C:\\Users\\asus\\OneDrive\\Desktop\\easy\\src\\app\\company.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Company } from \"./models\";\r\n\r\nconst STORAGE_KEY = \"companies_v1\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class CompanyService {\r\n  private companies: Company[] = [];\r\n\r\n  constructor() {\r\n    const raw = localStorage.getItem(STORAGE_KEY);\r\n\r\n    if (raw) {\r\n      this.companies = JSON.parse(raw);\r\n    } else {\r\n      // ✅ Seed dummy data on first load\r\n      this.companies = [\r\n        {\r\n          id: \"1\",\r\n          name: \"Google\",\r\n          email: \"contact@google.com\",\r\n          phone: \"1234567890\",\r\n          createdAt: new Date().toISOString(),\r\n        },\r\n        {\r\n          id: \"2\",\r\n          name: \"Microsoft\",\r\n          email: \"info@microsoft.com\",\r\n          phone: \"9876543210\",\r\n          createdAt: new Date().toISOString(),\r\n        },\r\n        {\r\n          id: \"3\",\r\n          name: \"Amazon\",\r\n          email: \"support@amazon.com\",\r\n          phone: \"5556667777\",\r\n          createdAt: new Date().toISOString(),\r\n        },\r\n      ];\r\n      this.persist();\r\n    }\r\n  }\r\n\r\n  private persist() {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\r\n  }\r\n\r\n  list(): Company[] {\r\n    return [...this.companies].sort((a, b) =>\r\n      b.createdAt.localeCompare(a.createdAt)\r\n    );\r\n  }\r\n\r\n  get(id: string): Company | undefined {\r\n    return this.companies.find((c) => c.id === id);\r\n  }\r\n\r\n  create(company: Company) {\r\n    this.companies.push({\r\n      ...company,\r\n      id: new Date().getTime().toString(), // generate ID\r\n      createdAt: new Date().toISOString(),\r\n    });\r\n    this.persist();\r\n  }\r\n\r\n  update(id: string, patch: Partial<Company>) {\r\n    const idx = this.companies.findIndex((c) => c.id === id);\r\n    if (idx >= 0) {\r\n      this.companies[idx] = { ...this.companies[idx], ...patch };\r\n      this.persist();\r\n    }\r\n  }\r\n\r\n  delete(id: string) {\r\n    this.companies = this.companies.filter((c) => c.id !== id);\r\n    this.persist();\r\n  }\r\n}\r\n"],"mappings":";AAGA,MAAMA,WAAW,GAAG,cAAc;AAGlC,OAAM,MAAOC,cAAc;EAGzBC,YAAA;IAFQ,KAAAC,SAAS,GAAc,EAAE;IAG/B,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAACN,WAAW,CAAC;IAE7C,IAAII,GAAG,EAAE;MACP,IAAI,CAACD,SAAS,GAAGI,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC;IAClC,CAAC,MAAM;MACL;MACA,IAAI,CAACD,SAAS,GAAG,CACf;QACEM,EAAE,EAAE,GAAG;QACPC,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE,YAAY;QACnBC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,EACD;QACEN,EAAE,EAAE,GAAG;QACPC,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE,YAAY;QACnBC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,EACD;QACEN,EAAE,EAAE,GAAG;QACPC,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE,YAAY;QACnBC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,CACF;MACD,IAAI,CAACC,OAAO,EAAE;IAChB;EACF;EAEQA,OAAOA,CAAA;IACbX,YAAY,CAACY,OAAO,CAACjB,WAAW,EAAEO,IAAI,CAACW,SAAS,CAAC,IAAI,CAACf,SAAS,CAAC,CAAC;EACnE;EAEAgB,IAAIA,CAAA;IACF,OAAO,CAAC,GAAG,IAAI,CAAChB,SAAS,CAAC,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACnCA,CAAC,CAACT,SAAS,CAACU,aAAa,CAACF,CAAC,CAACR,SAAS,CAAC,CACvC;EACH;EAEAW,GAAGA,CAACf,EAAU;IACZ,OAAO,IAAI,CAACN,SAAS,CAACsB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACjB,EAAE,KAAKA,EAAE,CAAC;EAChD;EAEAkB,MAAMA,CAACC,OAAgB;IACrB,IAAI,CAACzB,SAAS,CAAC0B,IAAI,CAAC;MAClB,GAAGD,OAAO;MACVnB,EAAE,EAAE,IAAIK,IAAI,EAAE,CAACgB,OAAO,EAAE,CAACC,QAAQ,EAAE;MAAE;MACrClB,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;KAClC,CAAC;IACF,IAAI,CAACC,OAAO,EAAE;EAChB;EAEAgB,MAAMA,CAACvB,EAAU,EAAEwB,KAAuB;IACxC,MAAMC,GAAG,GAAG,IAAI,CAAC/B,SAAS,CAACgC,SAAS,CAAET,CAAC,IAAKA,CAAC,CAACjB,EAAE,KAAKA,EAAE,CAAC;IACxD,IAAIyB,GAAG,IAAI,CAAC,EAAE;MACZ,IAAI,CAAC/B,SAAS,CAAC+B,GAAG,CAAC,GAAG;QAAE,GAAG,IAAI,CAAC/B,SAAS,CAAC+B,GAAG,CAAC;QAAE,GAAGD;MAAK,CAAE;MAC1D,IAAI,CAACjB,OAAO,EAAE;IAChB;EACF;EAEAoB,MAAMA,CAAC3B,EAAU;IACf,IAAI,CAACN,SAAS,GAAG,IAAI,CAACA,SAAS,CAACkC,MAAM,CAAEX,CAAC,IAAKA,CAAC,CAACjB,EAAE,KAAKA,EAAE,CAAC;IAC1D,IAAI,CAACO,OAAO,EAAE;EAChB;;;uBAvEWf,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAqC,OAAA,EAAdrC,cAAc,CAAAsC,IAAA;MAAAC,UAAA,EADD;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}