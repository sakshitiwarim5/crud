{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nconst STORAGE_KEY = \"companies_v1\";\nexport let CompanyService = /*#__PURE__*/(() => {\n  class CompanyService {\n    constructor() {\n      this.companies = [];\n      this.companies$ = new BehaviorSubject([]);\n      const raw = localStorage.getItem(STORAGE_KEY);\n      this.companies = raw ? JSON.parse(raw) : [];\n      this.companies$.next(this.list()); // emit initial list\n    }\n    persist() {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\n      this.companies$.next(this.list()); // emit updated list\n    }\n    list() {\n      return [...this.companies].sort((a, b) => b.createdAt.localeCompare(a.createdAt));\n    }\n    list$() {\n      return this.companies$.asObservable();\n    }\n    get(id) {\n      return this.companies.find(c => c.id === id);\n    }\n    create(company) {\n      this.companies.push(company);\n      this.persist();\n    }\n    update(id, company) {\n      const idx = this.companies.findIndex(c => c.id === id);\n      if (idx >= 0) {\n        this.companies[idx] = company; // replace whole object\n        this.persist();\n      }\n    }\n    delete(id) {\n      this.companies = this.companies.filter(c => c.id !== id);\n      this.persist();\n    }\n    static {\n      this.ɵfac = function CompanyService_Factory(t) {\n        return new (t || CompanyService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CompanyService,\n        factory: CompanyService.ɵfac,\n        providedIn: \"root\"\n      });\n    }\n  }\n  return CompanyService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}