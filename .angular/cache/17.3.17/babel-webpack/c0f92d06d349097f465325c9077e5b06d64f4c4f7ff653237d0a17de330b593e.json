{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst STORAGE_KEY = \"companies_v1\";\nexport class CompanyService {\n  constructor() {\n    this.companies = [];\n    const raw = localStorage.getItem(STORAGE_KEY);\n    this.companies = raw ? JSON.parse(raw) : [];\n  }\n  persist() {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\n  }\n  list() {\n    return [...this.companies].sort((a, b) => b.createdAt.localeCompare(a.createdAt));\n  }\n  get(id) {\n    return this.companies.find(c => c.id === id);\n  }\n  create(company) {\n    this.companies.push(company);\n    this.persist();\n  }\n  update(id, company) {\n    const idx = this.companies.findIndex(c => c.id === id);\n    if (idx >= 0) {\n      // Replace the entire company object, including empInfo\n      this.companies[idx] = company;\n      this.persist();\n    }\n  }\n  delete(id) {\n    this.companies = this.companies.filter(c => c.id !== id);\n    this.persist();\n  }\n  static {\n    this.ɵfac = function CompanyService_Factory(t) {\n      return new (t || CompanyService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CompanyService,\n      factory: CompanyService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["STORAGE_KEY","CompanyService","constructor","companies","raw","localStorage","getItem","JSON","parse","persist","setItem","stringify","list","sort","a","b","createdAt","localeCompare","get","id","find","c","create","company","push","update","idx","findIndex","delete","filter","factory","ɵfac","providedIn"],"sources":["C:\\Users\\asus\\OneDrive\\Desktop\\easy\\src\\app\\company.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Company } from \"./models\";\r\n\r\nconst STORAGE_KEY = \"companies_v1\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class CompanyService {\r\n  private companies: Company[] = [];\r\n\r\n  constructor() {\r\n    const raw = localStorage.getItem(STORAGE_KEY);\r\n    this.companies = raw ? JSON.parse(raw) : [];\r\n  }\r\n\r\n  private persist() {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\r\n  }\r\n\r\n  list(): Company[] {\r\n    return [...this.companies].sort((a, b) =>\r\n      b.createdAt.localeCompare(a.createdAt)\r\n    );\r\n  }\r\n\r\n  get(id: string): Company | undefined {\r\n    return this.companies.find((c) => c.id === id);\r\n  }\r\n\r\n  create(company: Company) {\r\n    this.companies.push(company);\r\n    this.persist();\r\n  }\r\n\r\n  update(id: string, company: Company) {\r\n    const idx = this.companies.findIndex((c) => c.id === id);\r\n    if (idx >= 0) {\r\n      // Replace the entire company object, including empInfo\r\n      this.companies[idx] = company;\r\n      this.persist();\r\n    }\r\n  }\r\n\r\n  delete(id: string) {\r\n    this.companies = this.companies.filter((c) => c.id !== id);\r\n    this.persist();\r\n  }\r\n}\r\n"],"mappings":";AAGA,MAAMA,WAAW,GAAG,cAAc;AAGlC,OAAM,MAAOC,cAAc;EAGzBC,YAAA;IAFQ,KAAAC,SAAS,GAAc,EAAE;IAG/B,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAACN,WAAW,CAAC;IAC7C,IAAI,CAACG,SAAS,GAAGC,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAG,EAAE;EAC7C;EAEQK,OAAOA,CAAA;IACbJ,YAAY,CAACK,OAAO,CAACV,WAAW,EAAEO,IAAI,CAACI,SAAS,CAAC,IAAI,CAACR,SAAS,CAAC,CAAC;EACnE;EAEAS,IAAIA,CAAA;IACF,OAAO,CAAC,GAAG,IAAI,CAACT,SAAS,CAAC,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACnCA,CAAC,CAACC,SAAS,CAACC,aAAa,CAACH,CAAC,CAACE,SAAS,CAAC,CACvC;EACH;EAEAE,GAAGA,CAACC,EAAU;IACZ,OAAO,IAAI,CAAChB,SAAS,CAACiB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;EAChD;EAEAG,MAAMA,CAACC,OAAgB;IACrB,IAAI,CAACpB,SAAS,CAACqB,IAAI,CAACD,OAAO,CAAC;IAC5B,IAAI,CAACd,OAAO,EAAE;EAChB;EAEAgB,MAAMA,CAACN,EAAU,EAAEI,OAAgB;IACjC,MAAMG,GAAG,GAAG,IAAI,CAACvB,SAAS,CAACwB,SAAS,CAAEN,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;IACxD,IAAIO,GAAG,IAAI,CAAC,EAAE;MACZ;MACA,IAAI,CAACvB,SAAS,CAACuB,GAAG,CAAC,GAAGH,OAAO;MAC7B,IAAI,CAACd,OAAO,EAAE;IAChB;EACF;EAEAmB,MAAMA,CAACT,EAAU;IACf,IAAI,CAAChB,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC0B,MAAM,CAAER,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;IAC1D,IAAI,CAACV,OAAO,EAAE;EAChB;;;uBAvCWR,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAA6B,OAAA,EAAd7B,cAAc,CAAA8B,IAAA;MAAAC,UAAA,EADD;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}