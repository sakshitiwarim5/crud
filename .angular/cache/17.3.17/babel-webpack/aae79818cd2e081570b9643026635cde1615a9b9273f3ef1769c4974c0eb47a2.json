{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport { DESIGNATIONS, SKILL_OPTIONS, isPastDate, genId } from \"../utils\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../company.service\";\nimport * as i3 from \"@angular/router\";\nexport let CompanyFormComponent = /*#__PURE__*/(() => {\n  class CompanyFormComponent {\n    constructor(fb, svc, router, route) {\n      this.fb = fb;\n      this.svc = svc;\n      this.router = router;\n      this.route = route;\n      this.designations = DESIGNATIONS;\n      this.skillOptions = SKILL_OPTIONS;\n      this.isEdit = false;\n      this.companyId = null;\n      this.saved = false;\n      this.form = this.fb.group({\n        companyName: [\"\", [Validators.required, Validators.maxLength(50)]],\n        address: [\"\"],\n        email: [\"\", [Validators.required, Validators.email, Validators.maxLength(100)]],\n        phoneNumber: [\"\", [Validators.required, Validators.maxLength(15)]],\n        empInfo: this.fb.array([])\n      });\n    }\n    ngOnInit() {\n      this.addEmployee(); // at least one\n      const id = this.route.snapshot.paramMap.get(\"id\");\n      if (id) {\n        const c = this.svc.get(id);\n        if (c) {\n          this.isEdit = true;\n          this.companyId = id;\n          this.setForm(c);\n        }\n      }\n    }\n    get empInfo() {\n      return this.form.get(\"empInfo\");\n    }\n    fc(name) {\n      return this.form.get(name);\n    }\n    addEmployee() {\n      const g = this.fb.group({\n        id: [genId()],\n        empName: [\"\", [Validators.required, Validators.maxLength(25)]],\n        designation: [\"Developer\"],\n        joinDate: [\"\", [Validators.required, c => isPastDate(c.value) ? null : {\n          pastOnly: true\n        }]],\n        email: [\"\", [Validators.required, Validators.email, Validators.maxLength(100)]],\n        phoneNumber: [\"\", [Validators.required, Validators.maxLength(15)]],\n        skillInfo: this.fb.array([]),\n        educationInfo: this.fb.array([])\n      });\n      this.empInfo.push(g);\n    }\n    removeEmployee(i) {\n      this.empInfo.removeAt(i);\n    }\n    skillArray(i) {\n      return this.empInfo.at(i).get(\"skillInfo\");\n    }\n    eduArray(i) {\n      return this.empInfo.at(i).get(\"educationInfo\");\n    }\n    addSkill(i) {\n      this.skillArray(i).push(this.fb.group({\n        skillName: [\"\", Validators.required],\n        skillRating: [1, [Validators.required, Validators.min(1), Validators.max(5)]]\n      }));\n    }\n    quickAddSkill(i, name) {\n      const arr = this.skillArray(i);\n      const exists = arr.value?.some(s => s.skillName?.toLowerCase() === name.toLowerCase());\n      if (!exists) {\n        arr.push(this.fb.group({\n          skillName: [name, Validators.required],\n          skillRating: [3, [Validators.required, Validators.min(1), Validators.max(5)]]\n        }));\n      }\n    }\n    removeSkill(i, si) {\n      this.skillArray(i).removeAt(si);\n    }\n    addEdu(i) {\n      this.eduArray(i).push(this.fb.group({\n        instituteName: [\"\", [Validators.required, Validators.maxLength(50)]],\n        courseName: [\"\", [Validators.required, Validators.maxLength(25)]],\n        completedYear: [\"\", Validators.required]\n      }));\n    }\n    removeEdu(i, ei) {\n      this.eduArray(i).removeAt(ei);\n    }\n    setForm(c) {\n      this.form.patchValue({\n        companyName: c.companyName,\n        address: c.address || \"\",\n        email: c.email,\n        phoneNumber: c.phoneNumber\n      });\n      this.empInfo.clear();\n      for (const e of c.empInfo) {\n        const eg = this.fb.group({\n          id: [e.id],\n          empName: [e.empName, [Validators.required, Validators.maxLength(25)]],\n          designation: [e.designation],\n          joinDate: [e.joinDate, [Validators.required, c => isPastDate(c.value) ? null : {\n            pastOnly: true\n          }]],\n          email: [e.email, [Validators.required, Validators.email, Validators.maxLength(100)]],\n          phoneNumber: [e.phoneNumber, [Validators.required, Validators.maxLength(15)]],\n          skillInfo: this.fb.array([]),\n          educationInfo: this.fb.array([])\n        });\n        this.empInfo.push(eg);\n        for (const s of e.skillInfo) {\n          this.skillArray(this.empInfo.length - 1).push(this.fb.group({\n            skillName: [s.skillName, Validators.required],\n            skillRating: [s.skillRating, [Validators.required, Validators.min(1), Validators.max(5)]]\n          }));\n        }\n        for (const ed of e.educationInfo) {\n          this.eduArray(this.empInfo.length - 1).push(this.fb.group({\n            instituteName: [ed.instituteName, [Validators.required, Validators.maxLength(50)]],\n            courseName: [ed.courseName, [Validators.required, Validators.maxLength(25)]],\n            completedYear: [ed.completedYear, Validators.required]\n          }));\n        }\n      }\n    }\n    onSubmit() {\n      if (this.form.invalid) {\n        this.form.markAllAsTouched();\n        return;\n      }\n      const raw = this.form.value;\n      const payload = {\n        id: this.isEdit && this.companyId ? this.companyId : genId(),\n        companyName: raw.companyName,\n        address: raw.address || \"\",\n        email: raw.email,\n        phoneNumber: raw.phoneNumber,\n        createdAt: new Date().toISOString(),\n        empInfo: (raw.empInfo || []).map(e => ({\n          id: e.id || genId(),\n          empName: e.empName,\n          designation: e.designation,\n          joinDate: e.joinDate,\n          email: e.email,\n          phoneNumber: e.phoneNumber,\n          skillInfo: (e.skillInfo || []).map(s => ({\n            skillName: s.skillName,\n            skillRating: String(s.skillRating)\n          })),\n          educationInfo: (e.educationInfo || []).map(d => ({\n            instituteName: d.instituteName,\n            courseName: d.courseName,\n            completedYear: d.completedYear\n          }))\n        }))\n      };\n      if (this.isEdit && this.companyId) {\n        this.svc.update(this.companyId, payload);\n      } else {\n        this.svc.create(payload);\n      }\n      this.saved = true;\n      setTimeout(() => this.saved = false, 2000);\n      this.router.navigate([\"/companies\"]);\n    }\n    static {\n      this.ɵfac = function CompanyFormComponent_Factory(t) {\n        return new (t || CompanyFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CompanyService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CompanyFormComponent,\n        selectors: [[\"app-company-form\"]],\n        decls: 0,\n        vars: 0,\n        template: function CompanyFormComponent_Template(rf, ctx) {}\n      });\n    }\n  }\n  return CompanyFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}