{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst STORAGE_KEY = \"companies_v1\";\nexport let CompanyService = /*#__PURE__*/(() => {\n  class CompanyService {\n    constructor() {\n      this.companies = [];\n      const raw = localStorage.getItem(STORAGE_KEY);\n      if (raw) {\n        this.companies = JSON.parse(raw);\n      } else {\n        // Seed data - use the exact property names from your Company model\n        this.companies = [{\n          id: \"1\",\n          companyName: \"Google\",\n          address: \"1600 Amphitheatre Parkway\",\n          email: \"contact@google.com\",\n          phoneNumber: \"1234567890\",\n          createdAt: new Date().toISOString(),\n          empInfo: []\n        }, {\n          id: \"2\",\n          companyName: \"Microsoft\",\n          address: \"One Microsoft Way\",\n          email: \"info@microsoft.com\",\n          phoneNumber: \"9876543210\",\n          createdAt: new Date().toISOString(),\n          empInfo: []\n        }, {\n          id: \"3\",\n          companyName: \"Amazon\",\n          address: \"410 Terry Ave N\",\n          email: \"support@amazon.com\",\n          phoneNumber: \"5556667777\",\n          createdAt: new Date().toISOString(),\n          empInfo: []\n        }];\n        this.persist();\n      }\n    }\n    persist() {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\n    }\n    list() {\n      return [...this.companies].sort((a, b) => b.createdAt.localeCompare(a.createdAt));\n    }\n    get(id) {\n      return this.companies.find(c => c.id === id);\n    }\n    create(company) {\n      // assume caller provides id/createdAt (your form already generates them);\n      // if not, we can generate them here instead.\n      this.companies.push(company);\n      this.persist();\n    }\n    update(id, patch) {\n      const idx = this.companies.findIndex(c => c.id === id);\n      if (idx >= 0) {\n        this.companies[idx] = {\n          ...this.companies[idx],\n          ...patch\n        };\n        this.persist();\n      }\n    }\n    delete(id) {\n      this.companies = this.companies.filter(c => c.id !== id);\n      this.persist();\n    }\n    static {\n      this.ɵfac = function CompanyService_Factory(t) {\n        return new (t || CompanyService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CompanyService,\n        factory: CompanyService.ɵfac,\n        providedIn: \"root\"\n      });\n    }\n  }\n  return CompanyService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}