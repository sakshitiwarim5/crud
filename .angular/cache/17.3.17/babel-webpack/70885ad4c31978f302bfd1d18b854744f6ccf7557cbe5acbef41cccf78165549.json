{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from \"@angular/core\";\n// import { Company } from \"./models\";\n// const STORAGE_KEY = \"companies_v1\";\n// @Injectable({ providedIn: \"root\" })\n// export class CompanyService {\n//   private companies: Company[] = [];\n//   constructor() {\n//     const raw = localStorage.getItem(STORAGE_KEY);\n//     this.companies = raw ? JSON.parse(raw) : [];\n//   }\n//   private persist() {\n//     localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\n//   }\n//   list(): Company[] {\n//     return [...this.companies].sort((a, b) =>\n//       b.createdAt.localeCompare(a.createdAt)\n//     );\n//   }\n//   get(id: string): Company | undefined {\n//     return this.companies.find((c) => c.id === id);\n//   }\n//   create(company: Company) {\n//     this.companies.push(company);\n//     this.persist();\n//   }\n//   update(id: string, company: Company) {\n//     const idx = this.companies.findIndex((c) => c.id === id);\n//     if (idx >= 0) {\n//       this.companies[idx] = company;\n//       this.persist();\n//     }\n//   }\n//   delete(id: string) {\n//     this.companies = this.companies.filter((c) => c.id !== id);\n//     this.persist();\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\asus\\OneDrive\\Desktop\\easy\\src\\app\\company.service.ts"],"sourcesContent":["// import { Injectable } from \"@angular/core\";\r\n// import { Company } from \"./models\";\r\n\r\n// const STORAGE_KEY = \"companies_v1\";\r\n\r\n// @Injectable({ providedIn: \"root\" })\r\n// export class CompanyService {\r\n//   private companies: Company[] = [];\r\n\r\n//   constructor() {\r\n//     const raw = localStorage.getItem(STORAGE_KEY);\r\n//     this.companies = raw ? JSON.parse(raw) : [];\r\n//   }\r\n\r\n//   private persist() {\r\n//     localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\r\n//   }\r\n\r\n//   list(): Company[] {\r\n//     return [...this.companies].sort((a, b) =>\r\n//       b.createdAt.localeCompare(a.createdAt)\r\n//     );\r\n//   }\r\n\r\n//   get(id: string): Company | undefined {\r\n//     return this.companies.find((c) => c.id === id);\r\n//   }\r\n\r\n//   create(company: Company) {\r\n//     this.companies.push(company);\r\n//     this.persist();\r\n//   }\r\n\r\n//   update(id: string, company: Company) {\r\n//     const idx = this.companies.findIndex((c) => c.id === id);\r\n//     if (idx >= 0) {\r\n//       this.companies[idx] = company;\r\n//       this.persist();\r\n//     }\r\n//   }\r\n\r\n//   delete(id: string) {\r\n//     this.companies = this.companies.filter((c) => c.id !== id);\r\n//     this.persist();\r\n//   }\r\n// }\r\n\r\n"],"mappings":";;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}