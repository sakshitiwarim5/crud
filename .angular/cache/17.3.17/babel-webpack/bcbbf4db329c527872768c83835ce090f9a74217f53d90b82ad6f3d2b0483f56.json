{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nconst STORAGE_KEY = \"companies_v1\";\nexport class CompanyService {\n  constructor() {\n    this.companies = [];\n    this.companies$ = new BehaviorSubject([]);\n    const raw = localStorage.getItem(STORAGE_KEY);\n    if (raw) {\n      this.companies = JSON.parse(raw);\n    } else {\n      // Seed data\n      this.companies = [{\n        id: \"1\",\n        companyName: \"Google\",\n        address: \"1600 Amphitheatre Parkway\",\n        email: \"contact@google.com\",\n        phoneNumber: \"1234567890\",\n        createdAt: new Date().toISOString(),\n        empInfo: []\n      }, {\n        id: \"2\",\n        companyName: \"Microsoft\",\n        address: \"One Microsoft Way\",\n        email: \"info@microsoft.com\",\n        phoneNumber: \"9876543210\",\n        createdAt: new Date().toISOString(),\n        empInfo: []\n      }, {\n        id: \"3\",\n        companyName: \"Amazon\",\n        address: \"410 Terry Ave N\",\n        email: \"support@amazon.com\",\n        phoneNumber: \"5556667777\",\n        createdAt: new Date().toISOString(),\n        empInfo: []\n      }];\n      this.persist();\n    }\n    this.companies$.next(this.list());\n  }\n  persist() {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\n    this.companies$.next(this.list());\n  }\n  list() {\n    return [...this.companies].sort((a, b) => b.createdAt.localeCompare(a.createdAt));\n  }\n  getAll() {\n    return this.companies$.asObservable();\n  }\n  get(id) {\n    return this.companies.find(c => c.id === id);\n  }\n  create(company) {\n    this.companies.push(company);\n    this.persist();\n  }\n  update(id, patch) {\n    const idx = this.companies.findIndex(c => c.id === id);\n    if (idx >= 0) this.companies[idx] = {\n      ...this.companies[idx],\n      ...patch\n    };\n    this.persist();\n  }\n  delete(id) {\n    this.companies = this.companies.filter(c => c.id !== id);\n    this.persist();\n  }\n  static {\n    this.ɵfac = function CompanyService_Factory(t) {\n      return new (t || CompanyService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CompanyService,\n      factory: CompanyService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","STORAGE_KEY","CompanyService","constructor","companies","companies$","raw","localStorage","getItem","JSON","parse","id","companyName","address","email","phoneNumber","createdAt","Date","toISOString","empInfo","persist","next","list","setItem","stringify","sort","a","b","localeCompare","getAll","asObservable","get","find","c","create","company","push","update","patch","idx","findIndex","delete","filter","factory","ɵfac","providedIn"],"sources":["C:\\Users\\asus\\OneDrive\\Desktop\\easy\\src\\app\\company.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { Company } from \"./models\";\r\n\r\nconst STORAGE_KEY = \"companies_v1\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class CompanyService {\r\n  private companies: Company[] = [];\r\n  private companies$ = new BehaviorSubject<Company[]>([]);\r\n\r\n  constructor() {\r\n    const raw = localStorage.getItem(STORAGE_KEY);\r\n    if (raw) {\r\n      this.companies = JSON.parse(raw) as Company[];\r\n    } else {\r\n      // Seed data\r\n      this.companies = [\r\n        {\r\n          id: \"1\",\r\n          companyName: \"Google\",\r\n          address: \"1600 Amphitheatre Parkway\",\r\n          email: \"contact@google.com\",\r\n          phoneNumber: \"1234567890\",\r\n          createdAt: new Date().toISOString(),\r\n          empInfo: [],\r\n        },\r\n        {\r\n          id: \"2\",\r\n          companyName: \"Microsoft\",\r\n          address: \"One Microsoft Way\",\r\n          email: \"info@microsoft.com\",\r\n          phoneNumber: \"9876543210\",\r\n          createdAt: new Date().toISOString(),\r\n          empInfo: [],\r\n        },\r\n        {\r\n          id: \"3\",\r\n          companyName: \"Amazon\",\r\n          address: \"410 Terry Ave N\",\r\n          email: \"support@amazon.com\",\r\n          phoneNumber: \"5556667777\",\r\n          createdAt: new Date().toISOString(),\r\n          empInfo: [],\r\n        },\r\n      ];\r\n      this.persist();\r\n    }\r\n    this.companies$.next(this.list());\r\n  }\r\n\r\n  private persist() {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(this.companies));\r\n    this.companies$.next(this.list());\r\n  }\r\n\r\n  list(): Company[] {\r\n    return [...this.companies].sort((a, b) =>\r\n      b.createdAt.localeCompare(a.createdAt)\r\n    );\r\n  }\r\n\r\n  getAll() {\r\n    return this.companies$.asObservable();\r\n  }\r\n\r\n  get(id: string): Company | undefined {\r\n    return this.companies.find((c) => c.id === id);\r\n  }\r\n\r\n  create(company: Company) {\r\n    this.companies.push(company);\r\n    this.persist();\r\n  }\r\n\r\n  update(id: string, patch: Partial<Company>) {\r\n    const idx = this.companies.findIndex((c) => c.id === id);\r\n    if (idx >= 0) this.companies[idx] = { ...this.companies[idx], ...patch };\r\n    this.persist();\r\n  }\r\n\r\n  delete(id: string) {\r\n    this.companies = this.companies.filter((c) => c.id !== id);\r\n    this.persist();\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}